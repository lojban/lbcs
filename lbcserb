#!/usr/bin/env ruby

require 'erb'

if ARGV.length < 5
    puts "Need at least 5 arguments.  Also, this is only for lbcs scripts.  How are you even seeing this?"
    exit 1
end

maindir=ARGV[0]
lbcsdir=ARGV[1]
container=ARGV[2]
templatefile=ARGV[3]
outputfile=ARGV[4]
type=ARGV[5]

if type != "containers" && type != "services"
  puts "Unknown type #{type}"
  exit 1
end

if ! File.directory?(maindir)
    puts "maindir arg '#{maindir}' doesn't look like a directory"
    exit 1
end

if ! File.directory?(lbcsdir)
    puts "lbcsdir arg '#{lbcsdir}' doesn't look like a directory"
    exit 1
end

containerdir=File.join(maindir, type, container)

if ! File.directory?(containerdir)
    puts "containerdir arg '#{containerdir}' doesn't look like a directory"
    exit 1
end

if ! File.exists?(templatefile)
    puts "templatefile arg '#{templatefile}' doesn't look like a file"
    exit 1
end

vals={}

vals['maindir']=maindir
vals['lbcsdir']=lbcsdir
vals['containerdir']=containerdir
vals['container']=container
vals['container_name']=container

# All args past the 4th are "foo=bar" stuff to add to the
# erb variable list
for arg in ARGV[5..] do
    stuff = arg.split('=', 2)
    vals[stuff[0]] = stuff[1]
end

files = [
    File.join(maindir, 'config'), 
    File.join(maindir, 'secrets'), 
    File.join(lbcsdir, 'config'), 
    File.join(lbcsdir, 'secrets'), 
    File.join(containerdir, 'config'), 
    File.join(containerdir, 'secrets'), 
]

# Now get all the vals from all the config and secrets files
for varfile in files do
    if File.exist?(varfile)
        for line in File.read(varfile).lines do
            line = line.gsub(%r{#.*},'').strip

            # Ruby local variables must start with a lower case letter
            # or underscore.  Also we don't care about lines with no =
            if line =~ %r{^[a-z_].*=}
                stuff = line.split('=', 2)
                if line =~ %r{^[a-z_].*="}
                    vals[stuff[0]] = stuff[1].sub( %r{^"(.*)"$}, '\1' )
                elsif line =~ %r{^[a-z_].*='}
                    vals[stuff[0]] = stuff[1].sub( %r{^'(.*)'$}, '\1' )
                else
                    vals[stuff[0]] = stuff[1]
                end
            end
        end
    end
end

templatetext = File.read(templatefile)

newtext = ERB.new(templatetext, trim_mode: '-').result_with_hash(vals)

oldtext=''

if File.exists?(outputfile)
    oldtext = File.read(outputfile)
end

if oldtext != newtext
    File.open(outputfile, 'w') { |file| file.write(newtext) }
end
