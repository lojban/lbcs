This is a system (Robin Powell) have been using to containerize
services.  

If you're building a new service using these scripts, this is *not*
plug-and-play; you really want to read this entire document.  If
you're just running a service that uses them, you should be fine
with README-Basic-Usage.txt

Intro
=====

The general idea is that each service gets its own user. That user
runs containers for the various parts of the service (db, web,
whatever). The source trees and data directories for each container
are all under the user's homedir, and are mounted into the
containers.

I run all of this with rootless podman, so these users have no
special permissions, and unlike with Docker the fact that they can
run containers with directory mounts is not fundamentally equivalent
to giving them root.  Having said that, you can do all this with
Docker, too.  There's not really any secret magic here, it's more a
standard for laying out the services, plus a few scripts.

It is expected that the entire service directory will be in source
control (i.e. git).  I personally simply move directories around in
the actual service's code source tree to match the layout below.

FIXME: link to example repo that uses this

General Layout
--------------

In this documentation, "main directory" is the place that has the
files you are symlinking to items in this repo.  You should have all
your services' source and data under the main directory.  Typically
the main directory is in the homedir of a dedicated serivice user;
typically it is the only non-trivial directory.

This is a subdirectory under the homedir because you're typically
going to want this to be a git repo, and having your *homedir* be a
git repo means having to ignore a *bunch* of stuff.

Example layout:

~user/
    .config/systemd/
            web.service       <-- autogenerated by setup.sh
            database.service  <-- autogenerated by setup.sh
    myservice/    <-- this is what we're calling the "main directory"
        run_container.sh -> /opt/lbcs/run_container.sh
        stop_container.sh -> /opt/lbcs/stop_container.sh
        ...
        secrets   <-- avaliable in template expansion
        config    <-- avaliable in template expansion
        cron/
            run_backups.sh
            crontab.erb
        containers/
            web/
                Dockerfile.erb
                config    <-- avaliable in template expansion
                secrets   <-- avaliable in template expansion
                src/
                    index.py
                    images/...
                misc/
                    web-httpd.conf
            database/
                Dockerfile.erb
                config    <-- avaliable in template expansion
                secrets   <-- avaliable in template expansion
                data/
                    postgresql.conf
                    pg_wal/...
                    backups/
                        db_backup.20201008.psql.tgz
                misc/
                    custom.sh
                    secrets.conf.erb

The ./build_image.sh script runs "podman build" in the context of
the main directory, so you can use any file under the main directory
in COPY clauses or whatever.

If you're using docker instead of podman, you will almost certainly
want to use a .dockerignore file to exclude your services' main data
directories; anything large that you're not using for COPY commands
in the Dockerfiles should be excluded, because Docker has to package
up *the whole dir* and send it to the daemon.  Podman doesn't have
that issue at all.

Getting Started
===============

$ ln -s /opt/lbcs/setup.sh
$ ./setup.sh

The Actual Service Source Code
------------------------------

Presumably you underlying service(s) also have source code; this
leaves you with a git-in-git situation, which always sucks.

I can't be arsed to managed submodules, so what I usually do is either:

- Move all the service stuff into the service's source repo.
  Advantages: only one repo.  Disadvantages: when people come to
  look at that repo there going to be like "... what is all this
  crap?".

The misc Directory
------------------

The misc directory typically contains things that you are going to
COPY into the image that don't belong in the main data directories
for the services.  For example, when running Apache you'll typically
need to copy a file into /etc/httpd/conf.d/ in the running image;
putting it in the web

Templating
----------

We use ERB for templating, for the simple reason that I'm used to
it.  You will, therefore, need Ruby installed.

All you really need to know is that "<%= foo %>" means "replace this
blob with the value of foo as a string".



-- 

- you have to manually restart the pod if you change anything about
  it, like the port list

Requirements
------------

- argbash
- ruby 2.5+ (specifically for ERB#result_with_hash)

Docker vs. Podman
-----------------

Podman Rootless With User Namespace
-----------------------------------

secrets & config
----------------

The only difference between the two files is that "secrets" is
typically in .gitignore and isn't checked in.

make a crontab
run setup.sh
